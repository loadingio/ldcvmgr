// Generated by LiveScript 1.3.1
var ldcvmgr, slice$ = [].slice;
ldcvmgr = function(opt){
  var that;
  opt == null && (opt = {});
  this.opt = opt;
  this.evtHandler = {};
  this.path = "/modules/cover".replace(/\/$/, '');
  this.loader = (that = opt.loader)
    ? that
    : new ldLoader({
      className: "ldld full",
      autoZ: true
    });
  this.covers = {};
  this.workers = {};
  this.prepareProxy = proxise(function(n){});
  this.init();
  return this;
};
ldcvmgr.prototype = import$(Object.create(Object.prototype), {
  on: function(n, cb){
    var ref$;
    return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
  },
  fire: function(n){
    var v, i$, ref$, len$, cb, results$ = [];
    v = slice$.call(arguments, 1);
    for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
      cb = ref$[i$];
      results$.push(cb.apply(this, v));
    }
    return results$;
  },
  error: function(n, e){
    n == null && (n = '');
    e == null && (e = {});
    if (n === 'error') {
      alert("something is wrong; please reload and try again");
    } else {
      this.toggle('error');
    }
    return console.log(e.message || e);
  },
  prepare: function(n){
    var p, that, this$ = this;
    if (this.covers[n]) {
      return Promise.resolve();
    }
    if (this.workers[n]) {
      return this.prepareProxy(n);
    }
    this.loader.on(1000);
    p = (that = document.querySelector(".ldcvmgr[data-name=" + n + "]"))
      ? Promise.resolve(that)
      : this.workers[n] = fetch(this.path + "/" + n + ".html").then(function(v){
        if (!(v && v.ok)) {
          throw new Error("modal '" + (!n ? '<no-name>' : n) + "' load failed.");
        }
        return v.text();
      }).then(function(it){
        var div, root;
        document.body.appendChild(div = ld$.create({
          name: 'div'
        }));
        div.innerHTML = it;
        ld$.find(div, 'script').map(function(it){
          var script;
          script = ld$.create({
            name: 'script',
            attr: {
              type: 'text/javascript'
            }
          });
          script.text = it.textContent;
          return it.parentNode.replaceChild(script, it);
        });
        return root = div.querySelector('.ldcv');
      });
    return p.then(function(root){
      this$.covers[n] = new ldCover({
        root: root,
        lock: root.getAttribute('data-lock') === 'true'
      });
      this$.prepareProxy.resolve();
      delete this$.workers[n];
      return debounce(1);
    })['finally'](function(){
      return this$.loader.cancel(false);
    })['catch'](function(it){
      throw it;
    });
  },
  purge: function(n){
    var ref$, ref1$;
    if (n != null) {
      return ref1$ = (ref$ = this.covers)[n], delete ref$[n], ref1$;
    } else {
      return this.covers = {};
    }
  },
  lock: function(n, p){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.covers[n].lock();
    }).then(function(){
      return this$.covers[n].toggle(true);
    })['catch'](function(it){
      return this$.error(n, it);
    });
  },
  toggle: function(n, v, p){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.covers[n].toggle(v);
    }).then(function(){
      return this$.fire((this$.covers[n].isOn() ? 'on' : 'off') + "", {
        node: this$.covers[n],
        param: p,
        name: n
      });
    })['catch'](function(it){
      return this$.error(n, it);
    });
  },
  getcover: function(n){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.covers[n];
    });
  },
  getdom: function(n){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.covers[n].root;
    });
  },
  isOn: function(n){
    return this.covers[n] && this.covers[n].isOn();
  },
  set: function(n, p){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.covers[n].set(p);
    });
  },
  get: function(n, p){
    var this$ = this;
    return this.prepare(n).then(function(){
      return this$.fire("on", {
        node: this$.covers[n],
        param: p,
        name: n
      });
    }).then(function(){
      return this$.covers[n].get();
    })['catch'](function(it){
      return this$.error(n, it);
    });
  },
  init: function(){
    var this$ = this;
    ld$.find('.ldcvmgr').map(function(n){
      var id;
      if (!(id = n.getAttribute('data-name')) || this$.covers[id]) {
        return;
      }
      return this$.covers[id] = new ldCover({
        root: n,
        lock: n.getAttribute('data-lock') === 'true'
      });
    });
    return ld$.find('[data-ldcv-toggle]').map(function(n){
      var id;
      if (!(id = n.getAttribute('data-ldcv-toggle'))) {
        return;
      }
      return n.addEventListener('click', function(){
        return this$.toggle(id);
      });
    });
  }
});
if (typeof module != 'undefined' && module !== null) {
  module.exports = ldcvmgr;
}
if (typeof window != 'undefined' && window !== null) {
  window.ldcvmgr = ldcvmgr;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
